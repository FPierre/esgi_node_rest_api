{
  "name": "nodemon",
  "homepage": "http://github.com/remy/nodemon",
  "author": {
    "name": "Remy Sharp",
    "url": "http://github.com/remy"
  },
  "bin": {
    "nodemon": "./nodemon.js"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/remy/nodemon.git"
  },
  "description": "Simple monitor script for use during development of a node.js app.",
  "keywords": [
    "monitor",
    "development",
    "restart",
    "autoload",
    "reload",
    "terminal"
  ],
  "version": "0.3.2",
  "main": "./nodemon",
  "readme": "# nodemon\n\nFor use during development of a node.js based application. \n\n`nodemon` will watch all the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\n`nodemon` does **not** require *any* changes to your code or method of development. `nodemon` simply wraps your node application and keeps an eye on any files that have changed.\n\n# Installation\n\nEither through forking or:\n\n    npm install nodemon\n    \nAnd `nodemon` will be installed in to your bin path.\n\n# Usage\n\n`nodemon` wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\n`nodemon` also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, `nodemon` will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\n# Ignoring files\n\nIn some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.  \n\nThe `nodemon-ignore` file is automatically created in the directory that you run your application from, so that you can have application specific ignore lists. \n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemon-ignore.example) as a basis for your `nodemon`, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Prerequisites\n\n`nodemon` currently depends on the [unix find](http://unixhelp.ed.ac.uk/CGI/man-cgi?find) command (which also is installed on Macs)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/remy/nodemon/issues"
  },
  "_id": "nodemon@0.3.2",
  "_from": "nodemon@0.3.2"
}
